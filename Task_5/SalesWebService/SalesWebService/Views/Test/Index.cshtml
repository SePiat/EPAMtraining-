@model IEnumerable<SalesWebService.Models.Buyers.BuyersIndexViewModel>
@using X.PagedList.Mvc.Core; //import this so we get our HTML Helper
@using X.PagedList; //import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)
<link href="/Content/PagedList.css" rel="stylesheet" type="text/css" />

<table width="50%">
    <thead>
        <tr>
            <td><h4 class="text-info">FullName</h4></td>
            <td><h4 class="text-info">CountBuyings</h4></td>
            <td> </td>
            <td> </td>

        </tr>
    </thead>
    <tbody>
        @foreach (var buyer in ViewBag.OnePageOfBuyers)
        {
            <tr>
                <td>@buyer.Buyer.FullName</td>
                <td align="center" width="20%">@buyer.CountBuyings</td>
                <td>
                    <a class="btn btn-light" asp-controller="Buyers" asp-action="Edit" asp-route-id="@buyer.Buyer.Id">Edit</a>
                </td>
                <td>
                    <form asp-action="Delete" asp-route-id="@buyer.Buyer.Id" method="post">
                        <button type="submit" class="btn btn-danger">
                            Delete
                        </button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>
<a style="margin-bottom:10px" class="btn btn-light" asp-controller="Buyers" asp-action="Create">Add Buyer</a>
<!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
@Html.PagedListPager((IPagedList)ViewBag.OnePageOfBuyers, page => Url.Action("Index", new { page }))
